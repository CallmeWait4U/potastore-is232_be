// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Account {
  id          String     @id @default(uuid())
  username    String     @unique
  password    String
  code        String
  role        String
  accessToken String?
  shopOwner   ShopOwner? @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId String?
  customer    Customer?  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String?
}

model ShopOwner {
  id          String    @id @default(uuid())
  name        String
  email       String
  phoneNumber String
  address     String
  dayOfBirth  DateTime
  avatar      String
  gender      String
  shop        Shop[]
  orders      Order[]
  account     Account[]
}

model Shop {
  id          String    @id @default(uuid())
  name        String
  address     String
  phoneNumber String
  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id])
  shopOwnerId String
  products    Product[]
}

model Product {
  id            String         @id @default(uuid())
  name          String
  code          String
  description   String
  price         Int
  createdDate   DateTime
  editedDate    DateTime?
  image         String?
  quantity      Int
  unit          String
  shop          Shop?          @relation(fields: [shopId], references: [id], onUpdate: NoAction)
  shopId        String?
  comments      Comment[]
  productCarts  ProductCart[]
  productOrders ProductOrder[]
  category      Category?      @relation(fields: [categoryId], references: [id])
  categoryId    String?
}

model Customer {
  id          String    @id @default(uuid())
  name        String
  email       String
  phoneNumber String?
  address     String?
  dayOfBirth  DateTime?
  avatar      String?
  gender      String?
  comments    Comment[]
  cart        Cart[]
  orders      Order[]
  account     Account[]
}

model Cart {
  id           String        @id @default(uuid())
  total        Int
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   String
  productCarts ProductCart[]
}

model Comment {
  id         String    @id @default(uuid())
  content    String?
  rating     Int
  product    Product?  @relation(fields: [productId], references: [id])
  productId  String?
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

model Order {
  id                String           @id @default(uuid())
  orderCode         String
  createdDate       DateTime
  paymentMethod     String?
  status            String
  total             Int
  customer          Customer?        @relation(fields: [customerId], references: [id])
  customerId        String?
  productOrders     ProductOrder[]
  shippingService   ShippingService? @relation(fields: [shippingServiceId], references: [id])
  shippingServiceId String?
  shopOwner         ShopOwner?       @relation(fields: [shopOwnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shopOwnerId       String?
}

model ShippingService {
  id     String  @id @default(uuid())
  name   String
  fee    Int
  status String
  orders Order[]
}

model ProductCart {
  id        String  @id @default(uuid())
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
  cart      Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String?
}

model ProductOrder {
  id        String  @id @default(uuid())
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String?
}

model Category {
  id      String    @id @default(uuid())
  name    String
  product Product[]
}

model PredictionResult {
  id         String   @id @default(uuid())
  image      String
  result     String
  dateUpload DateTime
}
